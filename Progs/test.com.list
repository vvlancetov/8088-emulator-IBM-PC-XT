EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
test.com -- emu8086 assembler version: 4.08  
 
[ 05.04.2025  --  4:19:10 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       name "huge"
[   2]        :                                       
[   3]        :                                       ; this example shows how to add huge unpacked bcd numbers.
[   4]        :                                       
[   5]        :                                       ; this allows to over come the 16 bit and even 32 bit limitation.
[   6]        :                                       ; because 32 digit decimal value holds over 100 bits!
[   7]        :                                       ; with some effort the number of digits can be increased.
[   8]        :                                       
[   9]        :                                       org     100h
[  10]        :                                       
[  11]        :                                       ; skip data:
[  12]    0100: EB 60                                 jmp     code
[  13]        :                                       
[  14]        :                                       ; the number of digits in numbers:
[  15]        :                                       ; it's important to reserve 0 as most significant digit, to avoid overflow.
[  16]        :                                       ; so if you need to operate with 250 digit values, you need to declare len = 251
[  17]        :                                       len     equ     32
[  18]        :                                       
[  19]        :                                       ; every decimal digit is stored in a separate byte.
[  20]        :                                       
[  21]        :                                       ; first number is: 423454612361234512344535179521
[  22]    0102: 00 00 04 02 03 04 05 04 06 01 02 03   num1    db      0,0,4,2,3,4,5,4,6,1,2,3,6,1,2,3,4,5,1,2,3,4,4,5,3,5,1,7,9,5,2,1
                06 01 02 03 04 05 01 02 03 04 04 05 
                03 05 01 07 09 05 02 01             
[  23]        :                                       ; second number is: 712378847771981123513137882498
[  24]    0122: 00 00 07 01 02 03 07 08 08 04 07 07   num2    db      0,0,7,1,2,3,7,8,8,4,7,7,7,1,9,8,1,1,2,3,5,1,3,1,3,7,8,8,2,4,9,8
                07 01 09 08 01 01 02 03 05 01 03 01 
                03 07 08 08 02 04 09 08             
[  25]        :                                       
[  26]        :                                       ; we will calculate this:
[  27]        :                                       
[  28]        :                                       ; sum = num1 + num2
[  29]        :                                       
[  30]        :                                       ; 423454612361234512344535179521 + 712378847771981123513137882498 =
[  31]        :                                       ;              = 1135833460133215635857673062019
[  32]        :                                       
[  33]    0142: 00 00 00 00 00 00 00 00 00 00 00 00   sum     db      len dup(0) ; declare array to keep the result.
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00             
[  34]        :                                       
[  35]        :                                       ; you may check the result on paper, or click Start , then Run, then type "calc" and hit enter key.
[  36]        :                                       
[  37]    0162: 90                                    code:   nop ; entry point (nop does nothing, it's nope).
[  38]        :                                       
[  39]        :                                       ; digit pointer:
[  40]    0163: 33 DB                                 xor     bx, bx
[  41]        :                                       
[  42]        :                                       ; setup the loop:
[  43]    0165: B9 20 00                              mov     cx, len
[  44]    0168: BB 1F 00                              mov 	bx, len-1  ; point to lest significant digit!
[  45]        :                                       
[  46]    016B:                                       next_digit:
[  47]        :                                       
[  48]        :                                       ; add digits:
[  49]    016B: 8A 87 02 01                           mov     al, num1[bx]
[  50]    016F: 12 87 22 01                           adc     al, num2[bx]
[  51]        :                                       
[  52]        :                                       ; this is a very useful instruction that
[  53]        :                                       ; adjusts the value of addition
[  54]        :                                       ; to be string compatible
[  55]    0173: 37                                    aaa
[  56]        :                                       
[  57]        :                                       ; aaa stands for ascii add adjust.
[  58]        :                                       ; --- algorithm behind aaa ---
[  59]        :                                       ; if low nibble of al > 9 or af = 1 then:
[  60]        :                                       	;     al = al + 6
[  61]        :                                       	;     ah = ah + 1
[  62]        :                                       	;     af = 1
[  63]        :                                       	;     cf = 1
[  64]        :                                       	; else
[  65]        :                                       	;     af = 0
[  66]        :                                       ;     cf = 0
[  67]        :                                       ;
[  68]        :                                       ; in both cases: clear the high nibble of al.
[  69]        :                                       ; --- end of aaa logic ---
[  70]        :                                       
[  71]        :                                       ; store result:
[  72]    0174: 88 87 42 01                           mov     sum[bx], al
[  73]        :                                       
[  74]        :                                       ; point to next digit:
[  75]    0178: 4B                                    dec     bx
[  76]        :                                       
[  77]    0179: E2 F0                                 loop    next_digit
[  78]        :                                       
[  79]        :                                       ; include carry in result (if any):
[  80]    017B: 80 97 42 01 00                        adc     sum[bx], 0
[  81]        :                                       
[  82]        :                                       
[  83]        :                                       ; print out the result:
[  84]    0180: B9 20 00                              mov     cx, len
[  85]        :                                       
[  86]        :                                       ; start printing from most significant digit:
[  87]    0183: BB 00 00                              mov     bx, 0
[  88]        :                                       
[  89]    0186:                                       print_d:
[  90]    0186: 8A 87 42 01                           mov     al, sum[bx]
[  91]        :                                       ; convert to ascii char:
[  92]    018A: 0C 30                                 or      al, 30h
[  93]        :                                       
[  94]    018C: B4 0E                                 mov     ah, 0eh
[  95]    018E: CD 10                                 int     10h
[  96]        :                                       
[  97]    0190: 43                                    inc     bx
[  98]        :                                       
[  99]    0191: E2 F3                                 loop    print_d
[ 100]        :                                       
[ 101]        :                                       ; wait for any key press:
[ 102]    0193: B4 00                                 mov ah, 0
[ 103]    0195: CD 16                                 int 16h
[ 104]        :                                       
[ 105]    0197: C3                                    ret  ; stop
[ 106]        :                                       
[ 107]        :                                       
[ 108]        :                                       
[ 109]        :                                       
[ 110]        :                                       
[ 111]        :                                       
[ 112]        :                                       
 
===================================================================================================
 




===================================================================================================
