EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
test.bin -- emu8086 assembler version: 4.08  
 
[ 05.04.2025  --  7:52:02 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       name "calc-sum"
[   2]        :                                       
[   3]        :                                       org 0h ; directive make tiny com file.
[   4]        :                                       
[   5]        :                                       ; calculate the sum of elements in vector,
[   6]        :                                       ; store result in m and print it in binary code.
[   7]        :                                       
[   8]    0000: BB D0 07                              mov bx, 2000
[   9]    0003: 8E DB                                 mov ds, bx
[  10]        :                                       
[  11]        :                                       
[  12]        :                                       ; number of elements:
[  13]    0005: B9 05 00                              mov cx, 5
[  14]        :                                       
[  15]        :                                       ; al will store the sum:
[  16]    0008: B0 00                                 mov al, 0
[  17]        :                                       
[  18]        :                                       ; bx is an index:
[  19]    000A: BB 00 00                              mov bx, 0
[  20]        :                                       
[  21]        :                                       ; sum elements:
[  22]    000D: 02 47 45                              next: add al, vector[bx]
[  23]        :                                       
[  24]        :                                       ; next byte:
[  25]    0010: 43                                    inc bx
[  26]        :                                       
[  27]        :                                       ; loop until cx=0:
[  28]    0011: E2 FA                                 loop next
[  29]        :                                       
[  30]        :                                       
[  31]        :                                       ; store result in m:
[  32]    0013: A2 4A 00                              mov m, al
[  33]        :                                       
[  34]        :                                       
[  35]        :                                       ; print result in binary:
[  36]    0016: 8A 1E 4A 00                           mov bl, m
[  37]    001A: B9 08 00                              mov cx, 8
[  38]    001D: B4 02                                 print: mov ah, 2   ; print function.
[  39]    001F: B2 30                                 mov dl, '0'
[  40]    0021: F6 C3 80                              test bl, 10000000b  ; test first bit.
[  41]    0024: 74 02                                 jz zero
[  42]    0026: B2 31                                 mov dl, '1'
[  43]    0028: CD 21                                 zero:  int 21h
[  44]    002A: D0 E3                                 shl bl, 1
[  45]    002C: E2 EF                                 loop print
[  46]        :                                       ; print binary suffix:
[  47]    002E: B2 62                                 mov dl, 'b'
[  48]    0030: CD 21                                 int 21h
[  49]        :                                       
[  50]        :                                       
[  51]        :                                       
[  52]    0032: B2 0A                                 mov dl, 0ah ; new line.
[  53]    0034: CD 21                                 int 21h
[  54]    0036: B2 0D                                 mov dl, 0dh ; carrige return.
[  55]    0038: CD 21                                 int 21h
[  56]        :                                       
[  57]        :                                       
[  58]        :                                       ; print result in decimal:
[  59]    003A: A0 4A 00                              mov al, m
[  60]    003D: E8 0B 00                              call print_al
[  61]        :                                       
[  62]        :                                       
[  63]        :                                       
[  64]        :                                       
[  65]        :                                       ; wait for any key press:
[  66]    0040: B4 00                                 mov ah, 0
[  67]    0042: CD 16                                 int 16h
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       
[  71]    0044: C3                                    ret
[  72]        :                                       
[  73]        :                                       ; variables:
[  74]    0045: 05 04 05 02 01                        vector db 5, 4, 5, 2, 1
[  75]    004A: 00                                    m db 0
[  76]        :                                       
[  77]        :                                       
[  78]    004B:                                       print_al proc
[  79]    004B: 3C 00                                 cmp al, 0
[  80]    004D: 75 09                                 jne print_al_r
[  81]    004F: 50                                    push ax
[  82]    0050: B0 30                                 mov al, '0'
[  83]    0052: B4 0E                                 mov ah, 0eh
[  84]    0054: CD 10                                 int 10h
[  85]    0056: 58                                    pop ax
[  86]    0057: C3                                    ret
[  87]    0058:                                       print_al_r:
[  88]    0058: 60                                    pusha
[  89]    0059: B4 00                                 mov ah, 0
[  90]    005B: 3D 00 00                              cmp ax, 0
[  91]    005E: 74 11                                 je pn_done
[  92]    0060: B2 0A                                 mov dl, 10
[  93]    0062: F6 F2                                 div dl
[  94]    0064: E8 F1 FF                              call print_al_r
[  95]    0067: 8A C4                                 mov al, ah
[  96]    0069: 04 30                                 add al, 30h
[  97]    006B: B4 0E                                 mov ah, 0eh
[  98]    006D: CD 10                                 int 10h
[  99]    006F: EB 00                                 jmp pn_done
[ 100]    0071:                                       pn_done:
[ 101]    0071: 61                                    popa
[ 102]    0072: C3                                    ret
[ 103]        :                                       endp
[ 104]        :                                       
 
===================================================================================================
 




===================================================================================================
